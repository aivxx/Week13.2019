//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""XRControls"",
            ""id"": ""fc7bfd4d-297a-4826-969a-8665924fef2d"",
            ""actions"": [
                {
                    ""name"": ""ReadValue"",
                    ""type"": ""Button"",
                    ""id"": ""e916c05e-f200-4eef-b10f-aff6fa835639"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d793918c-3da1-4f5b-83dd-08f98193918b"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controllers"",
                    ""action"": ""ReadValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e0a6d24-58e4-4559-b4f7-1d0fbda497a5"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Controllers"",
                    ""action"": ""ReadValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR Controllers"",
            ""bindingGroup"": ""XR Controllers"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // XRControls
        m_XRControls = asset.FindActionMap("XRControls", throwIfNotFound: true);
        m_XRControls_ReadValue = m_XRControls.FindAction("ReadValue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRControls
    private readonly InputActionMap m_XRControls;
    private IXRControlsActions m_XRControlsActionsCallbackInterface;
    private readonly InputAction m_XRControls_ReadValue;
    public struct XRControlsActions
    {
        private @InputActions m_Wrapper;
        public XRControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReadValue => m_Wrapper.m_XRControls_ReadValue;
        public InputActionMap Get() { return m_Wrapper.m_XRControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRControlsActions set) { return set.Get(); }
        public void SetCallbacks(IXRControlsActions instance)
        {
            if (m_Wrapper.m_XRControlsActionsCallbackInterface != null)
            {
                @ReadValue.started -= m_Wrapper.m_XRControlsActionsCallbackInterface.OnReadValue;
                @ReadValue.performed -= m_Wrapper.m_XRControlsActionsCallbackInterface.OnReadValue;
                @ReadValue.canceled -= m_Wrapper.m_XRControlsActionsCallbackInterface.OnReadValue;
            }
            m_Wrapper.m_XRControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ReadValue.started += instance.OnReadValue;
                @ReadValue.performed += instance.OnReadValue;
                @ReadValue.canceled += instance.OnReadValue;
            }
        }
    }
    public XRControlsActions @XRControls => new XRControlsActions(this);
    private int m_XRControllersSchemeIndex = -1;
    public InputControlScheme XRControllersScheme
    {
        get
        {
            if (m_XRControllersSchemeIndex == -1) m_XRControllersSchemeIndex = asset.FindControlSchemeIndex("XR Controllers");
            return asset.controlSchemes[m_XRControllersSchemeIndex];
        }
    }
    public interface IXRControlsActions
    {
        void OnReadValue(InputAction.CallbackContext context);
    }
}
